#!/bin/bash

# This script generates a Mandelbrot set visualization in the terminal.
# 
# Function: doBash
# 
# Variables:
# - P: Precision scaling factor (10^8)
# - Q: Derived from P (P/100)
# - X: Horizontal scaling factor (320*Q/cols)
# - Y: Vertical scaling factor (210*Q/lines)
# - a, b, c: Temporary variables for calculations
# - i: Iteration counter
# - v, x, y: Coordinates for the Mandelbrot set
# 
# The outer loop iterates over the vertical axis (y) from -105*Q to 105*Q.
# The inner loop iterates over the horizontal axis (x) from v to P.
# 
# For each point (x, y), the script calculates whether it belongs to the Mandelbrot set
# by iterating up to 99 times or until the condition a^2 + b^2 < 4*P^2 is met.
# 
# The colorBox function is called to display the point with a color based on the iteration count.
# 
# Finally, the script prints the generated Mandelbrot set to the terminal.
function doBash {
  typeset P Q X Y a b c i v x y
  for ((P=10**8,Q=P/100,X=320*Q/cols,Y=210*Q/lines,y=-105*Q,v=-220*Q,x=v;y<105*Q;x=v,y+=Y)); do
    for ((;x<P;a=b=i=c=0,x+=X)); do
      for ((;a**2+b**2<4*P**2&&i++<99;a=((c=a)**2-b**2)/P+x,b=2*c*b/P+y)); do :
      done
      colorBox $((i<99?i%16:0))
    done
    echo
  done
}

function colorBox {
  # (($1==lastclr)) || printf %s "${colrs[lastclr=$1]:=$(tput setaf "$1")}"
  # printf '\u2588'
  echo -en "\033[48;5;$1m \033[0m"
  # (($1==lastclr)) ||
  # echo -en "\033[48;5;$1m \033[0m"
}

unset -v lastclr
((cols=$(tput cols)-1, lines=$(tput lines) ))
typeset -a colrs
trap 'tput sgr0; echo' EXIT
${BASH_VERSION+doBash}