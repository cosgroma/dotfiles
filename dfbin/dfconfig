#!/bin/bash

# Load argsparse library.
. argsparse.sh

argsparse_use_option show "show dotfiles list" short:s
argsparse_use_option install "main installer" short:i
argsparse_use_option remove "remove dotfiles" short:r
argsparse_use_option update "parameterized update" short:u value
option_update_values=(name email password)
argsparse_use_option backup "backup current dotfiles" short:b

printf -v argsparse_usage_description "%s\n" \
  "Dotfiles onfiguration utilitiy" \
  "Usage Examples:" \
  " $(basename $0)" \
  " $(basename $0) -i" \
  " $(basename $0) --install" \
  " $(basename $0) --backup" \
  " $(basename $0) --update <name|email|password>" \
  " $(basename $0) --remove" \
  " $(basename $0) --show"

# Command line parsing is done here.
argsparse_parse_options "$@"

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

usrfile=$DIR/../.userrc

touch $usrfile
source $usrfile

dflist=(.ackrc \
.autotest \
.badvimrc \
.bashrc \
.bash_logout \
.dircolorsrc \
.emacs \
.emacs-lisp \
.gemrc \
.getmail \
.gitconfig \
.githelpers \
.gitmodules \
.hgrc \
.minttyrc \
.mutt \
.proxybash \
.ps1rc \
.offlineimap.py \
.offlineimaprc \
.rvmrc \
.screenrc \
.tmux.conf \
.userrc \
.vim \
.vimrc \
.zprofile \
.zsh \
.zshenv \
.zshrc \
dfbin \
.ps1_components.sh \
.aliases.sh \
.bash_functions.sh \
.pathdef.sh)


function set_user_name() {
  echo "enter name for .gitconfig";
  read name
  echo "name set to $name"
}

function set_user_email() {
  echo "enter email for .gitconfig";
  read email
  echo "email set to $email"
}

function set_user_password() {
  local userpass
  local temp
  cont=0;
  while [[ $cont == 0 ]]; do
    echo "enter network password for proxy configuration (for wget, github, etc.):"
    read -s -p "" userpass
    echo "re-enter:"
    read -s -p "" temp
    if [[ "$userpass" == "$temp" ]]; then
      echo "password set"
      cont=1
    else
      echo "ERROR: passwords don't match" 1>&2
      echo "try again..."
    fi
  done
  userpass64=$(echo $userpass | base64)
}

function set_user() {
  if [[ -z $name ]];       then set_user_name;     fi;
  if [[ -z $email ]];      then set_user_email;    fi;
  if [[ -z $userpass64 ]]; then set_user_password; fi;
  write_user_config_file
}

function write_user_config_file() {
  sed -e "s/user_name/$name/g" -e "s/user_email/$email/g" $DIR/../.gitconfig_default > $DIR/../.gitconfig
  echo "user=$(whoami)" > $usrfile
  echo "name=\"$name\"" >> $usrfile
  echo "email=$email" >> $usrfile
  echo "userpass64=$userpass64" >> $usrfile
  touch ~/.userpath.sh
  touch ~/.useraliases.sh
  env > ~/.userenv.sh
}

function set_links() {
  echo "Setting up symlinks : ~/.oldrcs/$dirstamp"
  for f in ${dflist[@]}; do
    ln -fs $DIR/../$f ~/$f
  done;
}

function backup_links() {
  dirstamp=$(date +%Y%m%d%H%M%S);
  mkdir -p ~/.oldrcs/$dirstamp;
  echo "BACKING UP SYMLINKS TO : ~/.oldrcs/$dirstamp"
  for f in ${dflist[@]}; do
    cp ~/$f ~/.oldrcs/$dirstamp/ 2>/dev/null;
  done;
}

function remove_links() {
  echo "REMOVING SYMLINKS TO : ~/.oldrcs/$dirstamp"
  for f in ${dflist[@]}; do
    rm -rf ~/$f
  done;
}

function show_files() {
  for f in ${dflist[@]}; do
    echo $f
  done;
}


if argsparse_is_option_set "show"
then
  show_files
elif argsparse_is_option_set "install"
then
  echo "running install"
  set_user
  backup_links
  set_links
  write_user_config_file

elif argsparse_is_option_set "backup"
then
  backup_links
elif argsparse_is_option_set "remove"
then
  remove_links
elif argsparse_is_option_set "update"
then
  case "${program_options[update]}" in
    name )
      set_user_name;
      ;;
    email )
      set_user_email;
      ;;
    password )
      set_user_password;
      ;;
  esac
  write_user_config_file
fi

exec /bin/bash -l


