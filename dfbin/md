#/bin/bash

# * code-friendly: Disable _ and __ for em and strong.
# * cuddled-lists: Allow lists to be cuddled to the preceding paragraph.
# * fenced-code-blocks: Allows a code block to not have to be indented
#   by fencing it with '```' on a line before and after. Based on
#   <http://github.github.com/github-flavored-markdown/> with support for
#   syntax highlighting.
# * footnotes: Support footnotes as in use on daringfireball.net and
#   implemented in other Markdown processors (tho not in Markdown.pl v1.0.1).
# * header-ids: Adds "id" attributes to headers. The id value is a slug of
#   the header text.
# * html-classes: Takes a dict mapping html tag names (lowercase) to a
#   string to use for a "class" tag attribute. Currently only supports
#   "pre" and "code" tags. Add an issue if you require this for other tags.
# * markdown-in-html: Allow the use of `markdown="1"` in a block HTML tag to
#   have markdown processing be done on its contents. Similar to
#   <http://michelf.com/projects/php-markdown/extra/#markdown-attr> but with
#   some limitations.
# * metadata: Extract metadata from a leading '---'-fenced block.
#   See <https://github.com/trentm/python-markdown2/issues/77> for details.
# * nofollow: Add `rel="nofollow"` to add `<a>` tags with an href. See
#   <http://en.wikipedia.org/wiki/Nofollow>.
# * pyshell: Treats unindented Python interactive shell sessions as <code>
#   blocks.
# * link-patterns: Auto-link given regex patterns in text (e.g. bug number
#   references, revision number references).
# * smarty-pants: Replaces ' and " with curly quotation marks or curly
#   apostrophes.  Replaces --, ---, ..., and . . . with en dashes, em dashes,
#   and ellipses.
# * toc: The returned HTML string gets a new "toc_html" attribute which is
#   a Table of Contents for the document. (experimental)
# * xml: Passes one-liner processing instructions and namespaced XML tags.
# * tables: Tables using the same format as GFM
#   <https://help.github.com/articles/github-flavored-markdown#tables> and
#   PHP-Markdown Extra <https://michelf.ca/projects/php-markdown/extra/#table>.
# * wiki-tables: Google Code Wiki-style tables. See
#   <http://code.google.com/p/support/wiki/WikiSyntax#Tables>.

case $(uname) in
  Linux|Darwin) python markdown_py $@ ;;
  *)
    declare -a cmd_list
    cmd_list[$i]=$(cygpath -aw `which markdown2.py`)
    i=1
    for arg in ${@}; do
      if [[ -e $arg ]]; then
        cmd_list[$i]=$(cygpath -aw $arg)
      else
        cmd_list[$i]=$arg
      fi
      i=$(($i + 1))
    done;
    # /cygdrive/c/Python27/python.exe ${cmd_list[@]}
    # for c in ${cmd_list[*]}; do
    #   echo $c
    # done;
    # /cygdrive/c/Python27/python.exe
    # /cygdrive/c/Python27/python.exe $(cygpath -aw $@)
    ;;
esac

# python $(cygpath -aw `which markdown_py`) ${@}
# --extras code-friendly,cuddled-lists,fenced-code-blocks,footnotes,header-ids,html-classes,markdown-in-html,metadata,nofollow,pyshell,link-patterns,smarty-pants,toc,xml,tables,wiki-tables
# user_body=$(echo $(python ${cmd_list[@]} --extras code-friendly,html-classes,tables,header-ids,fenced-code-blocks,smarty-pants))
user_body=$(echo $(python ${cmd_list[@]} --extras code-friendly,cuddled-lists,fenced-code-blocks,footnotes,header-ids,html-classes,markdown-in-html,metadata,nofollow,pyshell,smarty-pants,toc,xml,tables,wiki-tables))

basename=$(echo ${1%.*})
user_style=$(echo $(cat ${BASH_SOURCE%/*}/markdown/markdown.gfm2.css))
top_html=$(echo $(cat ${BASH_SOURCE%/*}/markdown/tophtml.html))
bottom_html=$(echo $(cat ${BASH_SOURCE%/*}/markdown/bottom.html))

# awk -v title="$basename" -v body="$user_body"  -v style="$user_style" '{
#   sub(/user_style/, style);
#   sub(/user_title/, title);
#   sub(/user_body/, body);
#   print;
# }' ${BASH_SOURCE%/*}/markdown/template4.html > $basename.html
# awk -v title="$basename" -v body="$user_body" '{
#   sub(/user_title/, title);
#   sub(/user_body/, body);
#   print;
# }' ${BASH_SOURCE%/*}/markdown/template5.html > $basename.html

echo $top_html $user_body $bottom_html > $basename.html




# user_body=$(echo $(perl ${BASH_SOURCE%/*}/markdown/Markdown.pl $1))
# if [[ $1 == "--help" ]]; then
#   cat ${BASH_SOURCE%/*}/markdown/markdown_cheetsheet.md
#   exit;
# fi

# perl $workspace/utils/markdown/Markdown.pl $1 > body.html
# user_body=$(echo $(cat body.html))
# cp $workspace/utils/markdown/markdown.css $basename.css
# awk -v title="$basename" -v style="$basename" -v body="$user_body" '{
#   sub(/user_title/, title);
#   sub(/user_style/, style);
#   sub(/user_body/, body);
#   print;
# }' $workspace/utils/markdown/template.html > $basename.html
# gsed -e 's/user_title/$basename/g' -e 's/user_style/$basename/g' -e "s@user_html@$user_html@g" $workspace/utils/markdown/template.html > $basename.html
